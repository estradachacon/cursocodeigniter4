Cache
  cache:clear       Clears the current system caches.
  cache:info        Shows file cache information in the current system.

CodeIgniter
  config:check      Check your Config values.
  env               Retrieves the current environment, or set a new one.
  filter:check      Check filters for a route.
  help              Displays basic usage information.
  list              Lists the available commands.
  namespaces        Verifies your namespaces are setup correctly.
  optimize          Optimize for production.
  phpini:check      Check your php.ini values in production environment.
  publish           Discovers and executes all predefined Publisher classes.
  routes            Displays all routes.
  serve             Launches the CodeIgniter PHP-Development Server.

Database
  db:create         Create a new database schema.
  db:seed           Runs the specified seeder to populate known data into the database.
  db:table          Retrieves information on the selected table.
  migrate           Locates and runs all new migrations against the database.
  make:migration    Creates a new migration file.
  migrate:refresh   Does a rollback followed by a latest to refresh the current state of the database.
  migrate:rollback  Runs the "down" method for all migrations in the last batch.
  migrate:status    Displays a list of all migrations and whether they've been run or not.

Encryption
  key:generate      Generates a new encryption key and writes it in an `.env` file.

Generators
  make:cell         Generates a new Controlled Cell file and its view.
  make:command      Generates a new spark command.
  make:config       Generates a new config file.
  make:controller   Generates a new controller file.
  make:entity       Generates a new entity file.
  make:filter       Generates a new filter file.
  make:migration    Generates a new migration file.
  make:model        Generates a new model file.
  make:scaffold     Generates a complete set of scaffold files.
  make:seeder       Generates a new seeder file.
  make:test         Generates a new test file.
  make:validation   Generates a new validation file.

Housekeeping
  debugbar:clear    Clears all debugbar JSON files.
  logs:clear        Clears all log files.

Translation
  lang:find         Find and save available phrases to translate.
  lang:sync         Synchronize translation files from one language to another.

  ---------------------
  Github
  
  Git init
  git add .
  git commit -m "crudpeliculas"
  git branch -M main
  git remote add origin https://github.com/estradachacon/cursocodeigniter4.git
  git push -u origin main
  git tag v0.1 -m "Crud"
  git push --tags

  Siempre al hacer una instalaciÃ³n con pull, se debe hacer un composer install para que composer instale las dependencias que se estan ignorando


  -----------------------------------
  Comandos de modelos para las consultas a las bases de datos

  Joins  // permite unir tablas
  Los Joins se emplean para combinar resultados entre distintas tablas buscando por el campo relacional; 
  en codeigniter, tenemos distinos tipos de joins (left, right, inner...) al igual que tenemos en SQL, como 
  primer parametro de la funcion join() pasamos la tabla a relacionar, y como siguiente parametro, la igualdad. 

  Ejemplo: 
  $peliculaModel->asObject()
    ->select('peliculas.*, categorias.titulo as categoria')
    ->join('categorias', 'categorias.id = peliculas.categoria_id')
    ->find();

  Paginados: 
  Funcion que puede ser simulada en SQL,  aunque en codeigniter vamos un paso mas alla; mas adelante
  veremos como emplear esta funcion en detalle; pero en esencia es emplear la funcion de paginate() indicandole 
  como parametro el nivel de paginado.

  $peliculaModel->asObject()
    ->select('peliculas.*, categorias.titulo as categoria')
    ->join('categorias', 'categorias.id = peliculas.categoria_id')
    ->paginate(10);
  
  Codiciones Where
  Son fundamentales en la mayoria de las consultas que realizamos y por ende los tienes que tener presentes;
  recibe dos parametros que corresponden a la columna a comparar y su valor.

  Ejemplo:
  $peliculaModel->asObject()
    ->select('peliculas.*, categorias.titulo as categoria')
    ->join('categorias', 'categorias.id = peliculas.categoria_id')
    ->where('categorias.id, $categoria_id')

  Para usar esta otra funcion:

  $this->db->getCompiledSelect(); 
  se requiere que se genere un query builder, que cree una instancia de conexion generica a la base de datos justo
  antes de llamar el getCompiledSelect()

  Ejemplo:

  $db =\Config\Database::connect();
  $builder = $db->table('peliculas');
  return $builder->limit(10, 20)->getCompiledSelect();

  Esto devuelve como tal el echo de la consulta SQL en pantalla
  